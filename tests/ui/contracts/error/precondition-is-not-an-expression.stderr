warning: unused variable: `meta_args`
  --> src/lib.rs
   |
   |     let mut meta_args = syn::parse_macro_input!(meta as crate::server_send::parse::Args);
   |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_meta_args`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
  --> src/lib.rs
   |
   |     let mut meta_args = syn::parse_macro_input!(meta as crate::server_send::parse::Args);
   |         ----^^^^^^^^^
   |         |
   |         help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

Ast: ItemFn {
    attrs: [
        Attribute {
            pound_token: Pound,
            style: Outer,
            bracket_token: Bracket,
            path: Path {
                leading_colon: None,
                segments: [
                    PathSegment {
                        ident: Ident {
                            ident: "precondition",
                            span: #0 bytes(57..69),
                        },
                        arguments: None,
                    },
                ],
            },
            tokens: TokenStream [
                Group {
                    delimiter: Parenthesis,
                    stream: TokenStream [
                        Ident {
                            ident: "struct",
                            span: #0 bytes(70..76),
                        },
                    ],
                    span: #0 bytes(69..77),
                },
            ],
        },
    ],
    vis: Inherited,
    sig: Signature {
        constness: None,
        asyncness: None,
        unsafety: None,
        abi: None,
        fn_token: Fn,
        ident: Ident {
            ident: "f",
            span: #0 bytes(82..83),
        },
        generics: Generics {
            lt_token: None,
            params: [],
            gt_token: None,
            where_clause: None,
        },
        paren_token: Paren,
        inputs: [],
        variadic: None,
        output: Default,
    },
    block: Block {
        brace_token: Brace,
        stmts: [],
    },
}
error: expected an expression as argument

         = help: example syntax: `#[precondition(argument % 2 == 0)]`

 --> tests/ui/contracts/error/precondition-is-not-an-expression.rs:4:15
  |
4 | #[precondition(struct)]
  |               ^^^^^^^^

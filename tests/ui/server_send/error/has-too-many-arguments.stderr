warning: unused import: `abort_call_site`
 --> src/server_send/analyze.rs
  |
  | use proc_macro_error::{abort, abort_call_site};
  |                               ^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `FromMeta`
 --> src/server_send/parsed.rs
  |
  | use darling::{FromMeta};
  |               ^^^^^^^^

warning: field is never read: `level`
  --> src/server_send/parsed.rs
   |
   |     level: Option<String>,
   |     ^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: field is never read: `name`
  --> src/server_send/parsed.rs
   |
   |     name: Option<String>,
   |     ^^^^^^^^^^^^^^^^^^^^

warning: field is never read: `skip`
  --> src/server_send/parsed.rs
   |
   |     skip: Option<String>,
   |     ^^^^^^^^^^^^^^^^^^^^

warning: field is never read: `fields`
  --> src/server_send/parsed.rs
   |
   |     fields: Option<String>,
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: associated function is never used: `skip_params`
  --> src/server_send/parsed.rs
   |
   |     fn skip_params(&self) -> Vec<String> {
   |        ^^^^^^^^^^^

warning: associated function is never used: `fields_params`
  --> src/server_send/parsed.rs
   |
   |     fn fields_params(&self) -> Vec<String> {
   |        ^^^^^^^^^^^^^

level = trace, name = "B", skip = [self], target = "bulls-eye"
4
Args { vars: [Assign(ExprAssign { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { ident: "level", span: #0 bytes(58..63) }, arguments: None }] } }), eq_token: Eq, right: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { ident: "trace", span: #0 bytes(64..69) }, arguments: None }] } }) }), Assign(ExprAssign { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { ident: "name", span: #0 bytes(71..75) }, arguments: None }] } }), eq_token: Eq, right: Lit(ExprLit { attrs: [], lit: Str(LitStr { token: "B" }) }) }), Assign(ExprAssign { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { ident: "skip", span: #0 bytes(81..85) }, arguments: None }] } }), eq_token: Eq, right: Array(ExprArray { attrs: [], bracket_token: Bracket, elems: [Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { ident: "self", span: #0 bytes(87..91) }, arguments: None }] } })] }) }), Assign(ExprAssign { attrs: [], left: Path(ExprPath { attrs: [], qself: None, path: Path { leading_colon: None, segments: [PathSegment { ident: Ident { ident: "target", span: #0 bytes(94..100) }, arguments: None }] } }), eq_token: Eq, right: Lit(ExprLit { attrs: [], lit: Str(LitStr { token: "bulls-eye" }) }) })] }
[]
fn f(self) { { self } }
error: `self` parameter is only allowed in associated functions
 --> tests/ui/server_send/error/has-too-many-arguments.rs:4:6
  |
4 | fn f(self) {self}
  |      ^^^^ not semantically valid as function parameter
  |
  = note: associated functions are those in `impl` or `trait` definitions

warning: unnecessary braces around block return value
 --> tests/ui/server_send/error/has-too-many-arguments.rs:4:12
  |
4 | fn f(self) {self}
  |            ^    ^
  |
  = note: `#[warn(unused_braces)]` on by default
help: remove these braces
  |
4 - fn f(self) {self}
4 + fn f(self) self
  |
